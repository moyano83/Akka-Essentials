akka{
  loglevel = "DEBUG"
}
mySpecialConfig {
  akka{
    loglevel = "INFO"
  }
}
timedAssertionConfig {
  akka.test.single-expect-default = 0.3s
}
eventFilterLoggingTestConfig{
  akka {
    loggers = ["akka.testkit.TestEventListener"]
  }
}
routersDemo {
  akka {
    actor.deployment {
      # This is the name of the actor that I am going to instantiate, / here is a subordinate of the 'user' guardian actor
      /poolMaster2 {
        router = round-robin-pool
        nr-of-instances = 2
      }

      /groupMaster2 {
        router = round-robin-group
        # This parameter is the routees path
        routees.paths = ["/user/slave_1","/user/slave_2","/user/slave_3","/user/slave_4","/user/slave_5"]
      }
    }
  }
}

# Dispatcher demo
my-dispatcher{
  # There are multiple type of dispatcher that we can use like:
  # PinnedDispatcher: Binds each actor to a thread pool of size 1 and these thread pools are circle around
  # CallingThreadDispatcher: All communications with an actor happens in the calling thread
  type = Dispatcher
  # Every dispatcher would have an executor (a JVM thread handler)
  executor = "thread-pool-executor"
  # We can configure the thread pool executor
  thread-pool-executor{
    fixed-pool-size = 1
  }
  # The number of messages that a dispatcher can send to an actor before it moves to another actor
  throughput = 30
}
dispatchersDemo {
  akka.actor.deployment{
    # we can configure the path to the actor in the context and then pass the dispatcher to it
    /rtjvm {
      dispatcher = my-dispatcher
    }
  }
}

# Mail Boxes Demo
mailBoxesDemo{
  support-ticket-dispatcher{
    mailbox-type = "part4.infrastructure.Mailboxes$SupportTicketPriorityMailBox"
  }
  control-mailbox {
    mailbox-type = "akka.dispatch.UnboundedControlAwareMailbox"
  }
  akka.actor.deployment{
    /AltControlAwareActor {
      mailbox = control-mailbox
    }
  }
}